openapi: 3.0.3
info:
  title: 'MyStep API Documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'https://mystep.ma.ddev.site:33001'
paths:
  /api/auth/login:
    post:
      summary: 'Get a Bearer token'
      operationId: getABearerToken
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: simonis.cierra@example.net
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: '<+#~%eD3U@7l_'
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/auth/register:
    post:
      summary: 'Register a new user'
      operationId: registerANewUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: axyzwaheulott
                  nullable: false
                last_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: dfylhjekabceybbfeheq
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: abelardo.zulauf@example.com
                  nullable: false
                phone:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vuzeovjxgaijravb
                  nullable: true
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: zf|8XjL\(LJ5(|O
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'The value and <code>password</code> must match.'
                  example: unde
                  nullable: false
                address:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: cglzcsjqcyvv
                  nullable: true
                location:
                  type: object
                  description: ''
                  example: null
                  nullable: true
                  properties: {  }
                referal_code:
                  type: string
                  description: ''
                  example: atque
                  nullable: true
              required:
                - first_name
                - last_name
                - email
                - password
                - password_confirmation
      security: []
  /api/auth/password/forgot:
    post:
      summary: "Reset password\nSend an email to reset password"
      operationId: resetPasswordSendAnEmailToResetPassword
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: taya.mills@example.org
                  nullable: false
              required:
                - email
      security: []
  /api/auth/otp/resend:
    post:
      summary: 'Resend OTP'
      operationId: resendOTP
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: pagac.obie@example.org
                  nullable: false
              required:
                - email
      security: []
  /api/auth/otp/verify:
    post:
      summary: 'Verify OTP'
      operationId: verifyOTP
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: eloy.wolff@example.org
                  nullable: false
                token:
                  type: string
                  description: ''
                  example: assumenda
                  nullable: false
              required:
                - email
                - token
      security: []
  /api/auth/logout:
    post:
      summary: "Logout\nRevoke the token"
      operationId: logoutRevokeTheToken
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
  /api/challenge:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                properties:
                  data:
                    type: array
                    example: []
      tags:
        - Challenge
      security: []
  '/api/challenge/{challenge_id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    -
                      status: 404
                      title: 'Record not found!'
                      detail: 'Challenge with id  10 not found'
                properties:
                  errors:
                    type: array
                    example:
                      -
                        status: 404
                        title: 'Record not found!'
                        detail: 'Challenge with id  10 not found'
                    items:
                      type: object
                      properties:
                        status:
                          type: integer
                          example: 404
                        title:
                          type: string
                          example: 'Record not found!'
                        detail:
                          type: string
                          example: 'Challenge with id  10 not found'
      tags:
        - Challenge
    parameters:
      -
        in: path
        name: challenge_id
        description: 'The ID of the challenge.'
        example: 10
        required: true
        schema:
          type: integer
  /api/challenge/add/participant:
    post:
      summary: 'store new participant to the challenge.'
      operationId: storeNewParticipantToTheChallenge
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Challenge
  /api/faq:
    get:
      summary: 'Get all FAQ catalogs'
      operationId: getAllFAQCatalogs
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                properties:
                  data:
                    type: array
                    example: []
      tags:
        - 'FAQ Catalog'
  '/api/faq/{faqCatalog_id}':
    get:
      summary: 'Get a specific FAQ catalog details'
      operationId: getASpecificFAQCatalogDetails
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    -
                      status: 404
                      title: 'Record not found!'
                      detail: 'FaqCatalog with id  5 not found'
                properties:
                  errors:
                    type: array
                    example:
                      -
                        status: 404
                        title: 'Record not found!'
                        detail: 'FaqCatalog with id  5 not found'
                    items:
                      type: object
                      properties:
                        status:
                          type: integer
                          example: 404
                        title:
                          type: string
                          example: 'Record not found!'
                        detail:
                          type: string
                          example: 'FaqCatalog with id  5 not found'
      tags:
        - 'FAQ Catalog'
    parameters:
      -
        in: path
        name: faqCatalog_id
        description: 'The ID of the faqCatalog.'
        example: 5
        required: true
        schema:
          type: integer
  /api/participation:
    get:
      summary: 'Historique des participations'
      operationId: historiqueDesParticipations
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    -
                      status: 401
                      title: Unauthenticated!
                      detail: Unauthenticated.
                properties:
                  errors:
                    type: array
                    example:
                      -
                        status: 401
                        title: Unauthenticated!
                        detail: Unauthenticated.
                    items:
                      type: object
                      properties:
                        status:
                          type: integer
                          example: 401
                        title:
                          type: string
                          example: Unauthenticated!
                        detail:
                          type: string
                          example: Unauthenticated.
      tags:
        - Participation
    post:
      summary: 'store new participant to the challenge.'
      operationId: storeNewParticipantToTheChallenge
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Participation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                challenge_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the challenges table.'
                  example: numquam
                  nullable: false
              required:
                - challenge_id
  /api/participation/mark-as-paid:
    post:
      summary: 'Mark participation as paid for test and run start action'
      operationId: markParticipationAsPaidForTestAndRunStartAction
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Participation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                challenge_user_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the challenge_users table.'
                  example: quod
                  nullable: false
              required:
                - challenge_user_id
  /api/partner:
    get:
      summary: 'Get all partners'
      operationId: getAllPartners
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                properties:
                  data:
                    type: array
                    example: []
      tags:
        - Partner
      security: []
  '/api/partner/{partner_id}':
    post:
      summary: 'Get a specific partner details'
      operationId: getASpecificPartnerDetails
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Partner
      security: []
    parameters:
      -
        in: path
        name: partner_id
        description: 'The ID of the partner.'
        example: 18
        required: true
        schema:
          type: integer
  /api/partner-type:
    get:
      summary: 'Get all partner types'
      operationId: getAllPartnerTypes
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: Restaurant
                      slug: restaurant
                      description: null
                      image: 'https://mystep.ma.ddev.site:33001/storage'
                      desabled_at: null
                      deleted_at: null
                      created_at: '2024-12-22T08:59:12.000000Z'
                      updated_at: '2024-12-22T08:59:12.000000Z'
                    -
                      id: 2
                      name: Boutique
                      slug: boutique
                      description: null
                      image: 'https://mystep.ma.ddev.site:33001/storage'
                      desabled_at: null
                      deleted_at: null
                      created_at: '2024-12-22T08:59:12.000000Z'
                      updated_at: '2024-12-22T08:59:12.000000Z'
                    -
                      id: 3
                      name: Magasin
                      slug: magasin
                      description: null
                      image: 'https://mystep.ma.ddev.site:33001/storage'
                      desabled_at: null
                      deleted_at: null
                      created_at: '2024-12-22T08:59:12.000000Z'
                      updated_at: '2024-12-22T08:59:12.000000Z'
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: Restaurant
                        slug: restaurant
                        description: null
                        image: 'https://mystep.ma.ddev.site:33001/storage'
                        desabled_at: null
                        deleted_at: null
                        created_at: '2024-12-22T08:59:12.000000Z'
                        updated_at: '2024-12-22T08:59:12.000000Z'
                      -
                        id: 2
                        name: Boutique
                        slug: boutique
                        description: null
                        image: 'https://mystep.ma.ddev.site:33001/storage'
                        desabled_at: null
                        deleted_at: null
                        created_at: '2024-12-22T08:59:12.000000Z'
                        updated_at: '2024-12-22T08:59:12.000000Z'
                      -
                        id: 3
                        name: Magasin
                        slug: magasin
                        description: null
                        image: 'https://mystep.ma.ddev.site:33001/storage'
                        desabled_at: null
                        deleted_at: null
                        created_at: '2024-12-22T08:59:12.000000Z'
                        updated_at: '2024-12-22T08:59:12.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Restaurant
                        slug:
                          type: string
                          example: restaurant
                        description:
                          type: string
                          example: null
                        image:
                          type: string
                          example: 'https://mystep.ma.ddev.site:33001/storage'
                        desabled_at:
                          type: string
                          example: null
                        deleted_at:
                          type: string
                          example: null
                        created_at:
                          type: string
                          example: '2024-12-22T08:59:12.000000Z'
                        updated_at:
                          type: string
                          example: '2024-12-22T08:59:12.000000Z'
      tags:
        - Partner
      security: []
  '/api/partner-type/{partnerCategory_id}':
    get:
      summary: 'Get a specific partner type'
      operationId: getASpecificPartnerType
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    name: Restaurant
                    slug: restaurant
                    description: null
                    image: 'https://mystep.ma.ddev.site:33001/storage'
                    desabled_at: null
                    deleted_at: null
                    created_at: '2024-12-22T08:59:12.000000Z'
                    updated_at: '2024-12-22T08:59:12.000000Z'
                    partners: []
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Restaurant
                      slug:
                        type: string
                        example: restaurant
                      description:
                        type: string
                        example: null
                      image:
                        type: string
                        example: 'https://mystep.ma.ddev.site:33001/storage'
                      desabled_at:
                        type: string
                        example: null
                      deleted_at:
                        type: string
                        example: null
                      created_at:
                        type: string
                        example: '2024-12-22T08:59:12.000000Z'
                      updated_at:
                        type: string
                        example: '2024-12-22T08:59:12.000000Z'
                      partners:
                        type: array
                        example: []
      tags:
        - Partner
      security: []
    parameters:
      -
        in: path
        name: partnerCategory_id
        description: 'The ID of the partnerCategory.'
        example: 1
        required: true
        schema:
          type: integer
  /api/share:
    get:
      summary: 'Historique des parts journaliers'
      operationId: historiqueDesPartsJournaliers
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    -
                      status: 401
                      title: Unauthenticated!
                      detail: Unauthenticated.
                properties:
                  errors:
                    type: array
                    example:
                      -
                        status: 401
                        title: Unauthenticated!
                        detail: Unauthenticated.
                    items:
                      type: object
                      properties:
                        status:
                          type: integer
                          example: 401
                        title:
                          type: string
                          example: Unauthenticated!
                        detail:
                          type: string
                          example: Unauthenticated.
      tags:
        - Parts
    post:
      summary: 'Valider les parts journaliers'
      operationId: validerLesPartsJournaliers
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Parts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shares:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 40
                  nullable: false
              required:
                - shares
  /api/share/user/history:
    get:
      summary: "Total des parts d'un utilisateur"
      operationId: totalDesPartsDunUtilisateur
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    -
                      status: 401
                      title: Unauthenticated!
                      detail: Unauthenticated.
                properties:
                  errors:
                    type: array
                    example:
                      -
                        status: 401
                        title: Unauthenticated!
                        detail: Unauthenticated.
                    items:
                      type: object
                      properties:
                        status:
                          type: integer
                          example: 401
                        title:
                          type: string
                          example: Unauthenticated!
                        detail:
                          type: string
                          example: Unauthenticated.
      tags:
        - Parts
  /api/user:
    get:
      summary: 'Get the authenticated user details.'
      operationId: getTheAuthenticatedUserDetails
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    -
                      status: 401
                      title: Unauthenticated!
                      detail: Unauthenticated.
                properties:
                  errors:
                    type: array
                    example:
                      -
                        status: 401
                        title: Unauthenticated!
                        detail: Unauthenticated.
                    items:
                      type: object
                      properties:
                        status:
                          type: integer
                          example: 401
                        title:
                          type: string
                          example: Unauthenticated!
                        detail:
                          type: string
                          example: Unauthenticated.
      tags:
        - User
  '/api/user/{user_id}':
    put:
      summary: 'Update the authenticated user details.'
      operationId: updateTheAuthenticatedUserDetails
      description: ''
      parameters: []
      responses: {  }
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: hkpelnrlmwqstynvbeddflne
                  nullable: false
                last_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ldt
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: nickolas93@example.com
                  nullable: false
                phone:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: rv
                  nullable: true
                address:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: rhmuezfuslvzaqwgafmnpcr
                  nullable: true
                location:
                  type: object
                  description: ''
                  example: null
                  nullable: true
                  properties: {  }
              required:
                - first_name
                - last_name
                - email
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
  /api/visit-our-partner:
    get:
      summary: 'Historique des visites chez nos partenaires'
      operationId: historiqueDesVisitesChezNosPartenaires
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    -
                      status: 401
                      title: Unauthenticated!
                      detail: Unauthenticated.
                properties:
                  errors:
                    type: array
                    example:
                      -
                        status: 401
                        title: Unauthenticated!
                        detail: Unauthenticated.
                    items:
                      type: object
                      properties:
                        status:
                          type: integer
                          example: 401
                        title:
                          type: string
                          example: Unauthenticated!
                        detail:
                          type: string
                          example: Unauthenticated.
      tags:
        - 'Visit Our Partner'
  /api/visit-our-partner/start-walking:
    post:
      summary: 'Starting march towards the partner'
      operationId: startingMarchTowardsThePartner
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Visit Our Partner'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                partner_id:
                  type: integer
                  description: ''
                  example: 8
                  nullable: false
                minimum_steps:
                  type: integer
                  description: 'Must be at least 0.'
                  example: 42
                  nullable: false
                current_steps_in_beginning:
                  type: integer
                  description: 'Must be at least 0.'
                  example: 34
                  nullable: false
              required:
                - partner_id
                - minimum_steps
                - current_steps_in_beginning
  /api/visit-our-partner/mark-as-walked:
    post:
      summary: 'Mark the march towards the partner as done'
      operationId: markTheMarchTowardsThePartnerAsDone
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Visit Our Partner'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                challenge_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                current_latitude:
                  type: number
                  description: ''
                  example: 754.526
                  nullable: false
                current_longitude:
                  type: number
                  description: ''
                  example: 13707127.3354
                  nullable: false
                current_steps_in_end:
                  type: integer
                  description: 'Must be at least 0.'
                  example: 40
                  nullable: false
              required:
                - challenge_id
                - current_latitude
                - current_longitude
                - current_steps_in_end
  '/api/visit-our-partner/left-walking/{atOurPartner_id}':
    post:
      summary: 'Mark the march towards the partner as left'
      operationId: markTheMarchTowardsThePartnerAsLeft
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Visit Our Partner'
    parameters:
      -
        in: path
        name: atOurPartner_id
        description: 'The ID of the atOurPartner.'
        example: 1
        required: true
        schema:
          type: integer
  /api/visit-our-partner/transfert-rewards:
    post:
      summary: 'Action de transfert des points de visite chez un partenaire dans le wallet'
      operationId: actionDeTransfertDesPointsDeVisiteChezUnPartenaireDansLeWallet
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Visit Our Partner'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                challenge_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the at_our_partners table.'
                  example: eveniet
                  nullable: false
              required:
                - challenge_id
  /api/wallets:
    get:
      summary: 'Handle the incoming request.'
      operationId: handleTheIncomingRequest
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    -
                      status: 401
                      title: Unauthenticated!
                      detail: Unauthenticated.
                properties:
                  errors:
                    type: array
                    example:
                      -
                        status: 401
                        title: Unauthenticated!
                        detail: Unauthenticated.
                    items:
                      type: object
                      properties:
                        status:
                          type: integer
                          example: 401
                        title:
                          type: string
                          example: Unauthenticated!
                        detail:
                          type: string
                          example: Unauthenticated.
      tags:
        - Wallet
tags:
  -
    name: Auth
    description: 'This is the Auth controller'
  -
    name: Challenge
    description: ''
  -
    name: 'FAQ Catalog'
    description: ''
  -
    name: Participation
    description: "\nAll participation related endpoints"
  -
    name: Partner
    description: ''
  -
    name: Parts
    description: ''
  -
    name: User
    description: 'All user related endpoints'
  -
    name: 'Visit Our Partner'
    description: ''
  -
    name: Wallet
    description: 'This is the Wallet controller'
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
